#!/usr/bin/env python

import rospy
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

import numpy as np

cur_frame = None
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
kernel = np.ones((10,10), np.uint8)

def get_image(data):
	global cur_frame
	bridge = CvBridge()
	cur_frame = bridge.imgmsg_to_cv2(data, "bgr8")


def main():
	global cur_frame
	rospy.init_node('cam_test_rm', anonymous=True)
	rospy.Subscriber('img_topic', Image, get_image)

	clr = np.uint8([[[255, 0, 0]]])
	hsv_clr = cv2.cvtColor(clr, cv2.COLOR_BGR2HSV)
	rospy.loginfo(hsv_clr)

	rate = rospy.Rate(5)
	while not rospy.is_shutdown():
		if cur_frame is not None:
			rows,cols,channels = cur_frame.shape
			
			# gray_frame = cv2.cvtColor(cur_frame, cv2.COLOR_BGR2GRAY)
			# faces = face_cascade.detectMultiScale(gray_frame,1.3, 5)
			# blurred = cv2.GaussianBlur(cur_frame, (11, 11), 0)
			hsv_frame = cv2.cvtColor(cur_frame, cv2.COLOR_BGR2HSV)
			lower_range = np.array([100,100,100])
			upper_range = np.array([140,255,255])

			mask = cv2.inRange(hsv_frame, lower_range, upper_range)
			# mask = cv2.erode(mask, None, iterations=2)
			# mask = cv2.dilate(mask, None, iterations=2)
			mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

			image, cnts, hierarchy = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
			cur_frame = cv2.drawContours(cur_frame, cnts, -1, (0,255,0), 3)

			# for i in cnts:
				# x,y,w,h = cv2.boundingRect(i)
				# cur_frame = cv2.rectangle(cur_frame, (x,y),(x+w,y+h), (0,0,255),3)
			if len(cnts) > 0:
				c = max(cnts, key=cv2.contourArea)
				x,y,w,h = cv2.boundingRect(c)

				cur_frame = cv2.rectangle(cur_frame, (x,y),(x+w,y+h), (0,0,255),2)
				center = (x + (w//2),y + (h//2))
				cur_frame = cv2.rectangle(cur_frame, (center[0]-1, center[1]-1), (center[0]+1, center[1]+1), (0,255,255),2)
				rospy.loginfo(center)

			# cnts = imutils.grab_contours(cnts)

			# if len(cnts) > 0:
			# 	c = max(cnts, key=cv2.contourArea)
			# 	((x,y),radius) = cv2.minEnclosingCircle(c)
			# 	print(x)
			# 	print(y)
			# 	print()

			# mask = cv2.inRange(hsv_frame, upper_range, lower_range)
			# res = cv2.bitwise_and(cur_frame, cur_frame, mask=mask)


			# for (x,y,w,h) in faces:
				# center = ((w//2)+x, (h//2)+y)
				# cur_frame = cv2.rectangle(cur_frame, (x,y),(x+w,y+h),(255,0,0),2)
			cv2.imshow("cur_frame", cur_frame)
			cv2.imshow('mask', mask)

			# print(np.transpose(mask.nonzero()[0]))

			# cv2.imshow('res', res)

			cv2.waitKey(3)
		rate.sleep()

if __name__ == '__main__':
	try:
		main()
	except rospy.ROSInterruptException:
		cv2.destroyAllWindows()
