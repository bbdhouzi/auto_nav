class navigation():
	def __init__(self):
		self._checked_positions = []
		self._current_pos = ()
		self._target_location = ()

	def checked_pos_append(self, pos):
		self._checked_positions.append(pos)

	def set_current_pos(self, pos):
		self._current_pos = pos

	def set_target_loc(self, pos):
		self._target_location = pos

	def get_next_pos(self, input_grid):
		pos_to_check = [self._current_pos]
		for cur_pos in pos_to_check:
			i,j = cur_pos[0], cur_pos[1]
			for next_pos in [(i-1,j),(i,j+1),(i+1,j),(i,j-1)]:
				if next_pos not in self._checked_positions:
					if input_grid[next_pos] == 0:
						print('[NAV] next unmapped region found: (%i,%i)', next_pos[0], next_pos[1])
						return next_pos
					elif input_grid[next_pos] == 1:
						pos_to_check.append(next_pos)
			self._checked_positions.append(cur_pos)

			if cur_pos in pos_to_check:
				pos_to_check.remove(cur_pos)

		print('[MAP] mapping complete')
		return self._target_location

def pick_direction2():
	# global occ_grid

	occ_data = np.array(occ_grid)
	
	ret,img = cv2.threshold(occ_data, 2, 255, 0)

	element = cv2.getStructuringElement(cv2.MORPH_CROSS, (3,3))
	img2 = cv2.dilate(img, element)
	img3, fc, hierarchy = cv2.findContours(img2, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
	# rospy.loginfo(hierarchy)
	contours = fc[0]
	lc = len(contours)
	img4 = cv2.cvtColor(img3, cv2.COLOR_GRAY2RGB)

	for contour in fc:
		# x,y,w,h = cv2.boundingRect(contour)
		# rospy.loginfo("%d, %d, %d, %d", x, y ,w, h)
		start_point = contour[0][0]
		rospy.loginfo(start_point)
		x,y = start_point
		# x,y = start_point[0], start_point[1]
		cv2.rectangle(img4, (x-3,y-3),(x+3,y+3), (255,0,0), 2)
	
	cv2.imshow('Map', img4)
	cv2.waitKey()