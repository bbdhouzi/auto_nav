#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
from std_msgs.msg import UInt16MultiArray
from std_msgs.msg import Bool
from std_msgs.msg import Int16

import cv2 
from cv_bridge import CvBridge, CvBridgeError

import numpy as np
import time 

prev_image_time = 0.0
latest_frame = None
kernel = np.ones((10,10), np.uint8)

# target color types:
# 0: red
# 1: green
# 2: blue
target_color = 0

cv_bridge = CvBridge()

def image_cb(msg):
	global latest_frame
	global prev_image_time
	# cur_time = time.time()
	# if cur_time - prev_image_time > 0.5:
	latest_frame = cv_bridge.imgmsg_to_cv2(msg, "bgr8")
		# prev_image_time = cur_time


def image_analysis():
	global latest_frame
	if latest_frame is None:
		return False, 0, 0
	
	hsv_frame = cv2.cvtColor(latest_frame, cv2.COLOR_BGR2HSV)

	if target_color == 0:
		hsv_lower_ranges = [np.array([0,127,127]), np.array([170,127,127])]
		hsv_upper_ranges = [np.array([10,255,255]), np.array([180,255,255])]
	elif target_color == 1:
		hsv_lower_ranges = [np.array([55,127,127])]
		hsv_upper_ranges = [np.array([65,255,255])]
	elif target_color == 2:
		hsv_lower_ranges = [np.array([110,127,127])]
		hsv_upper_ranges = [np.array([130,255,255])]
		
	frame_width, frame_height, _ = latest_frame.shape
	final_mask = np.zeros((frame_width, frame_height), np.uint8)

	for i in range(len(hsv_lower_ranges)):
		mask = cv2.inRange(hsv_frame, hsv_lower_ranges[i], hsv_upper_ranges[i])
		final_mask = cv2.bitwise_or(final_mask, mask)

	final_mask = cv2.morphologyEx(final_mask, cv2.MORPH_OPEN, kernel)
	_, contours, _ = cv2.findContours(final_mask,  cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

	# cv2.imshow('latest frame', latest_frame)
	# cv2.imshow('mask', final_mask)
	# cv2.waitKey(1)

	if len(contours) > 0:
		largest_contour = max(contours, key=cv2.contourArea)
	
		x,y,w,h = cv2.boundingRect(largest_contour)
		center = (x+(w//2), y+(h//2))

		horizontal_amt = int(((frame_width/2 - center[0])/(frame_width/2)) * 100)
		vertical_amt = int(((frame_height/2 - center[1])/(frame_height/2)) * 100)

		rospy.logwarn(center)
		# cv2.rectangle(latest_frame, (x,y), (x+w, y+h), (0,0,255), 2)
		# cv2.rectangle(latest_frame, (center[0]-1, center[1]-1), (center[0]+1, center[1]+1), (0.255,0), 2)
		# cv2.imshow('latest frame', latest_frame)
		# cv2.imshow('mask', final_mask)
		# cv2.waitKey(1)
		latest_frame = None
		return True, horizontal_amt, vertical_amt
	return False, 0, 0

if __name__ == '__main__':
	try:
		rospy.init_node('target_id', anonymous=True)
		rospy.Subscriber('raspicam_node/image', Image, image_cb)
		pub_visible = rospy.Publisher('/target/identified', Bool, queue_size=10)
		pub_horizontal = rospy.Publisher('/target/horizontal', Int16, queue_size=10)
		pub_vertical = rospy.Publisher('/target/vertical', Int16, queue_size=10)
		# rospy.Subscriber('/target/reached', Bool, target_fire_cb)

		rate = rospy.Rate(10)
		while True:
			id_positive, horizontal_amt, vertical_amt = image_analysis()
			if id_positive:
				pub_visible.publish(Bool(True))
				pub_horizontal.publish(Int16(horizontal_amt))
				pub_vertical.publish(Int16(vertical_amt))
			else:
				pub_visible.publish(False)
			rate.sleep()

	except rospy.ROSInterruptException:
		cv2.destroyAllWindows()
		exit()
	except KeyboardInterrupt:
		cv2.destroyAllWindows()
		exit()