#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
from std_msgs.msg import UInt16MultiArray
from std_msgs.msg import Bool
from std_msgs.msg import Int8

import cv2 
from cv_bridge import CvBridge, CvBridgeError

import numpy as np

prev_image_time = 0
latest_frame = None
kernel = np.ones((10,10), np.uint8)

# target color types:
# 0: red
# 1: green
# 2: blue
target_color = 0

cv_bridge = CvBridge()

def image_cb(msg):
	global latest_frame
	cur_time = time.time()
	if cur_time - prev_image_time > 0.5:
		latest_frame = cv_bridge.imgmsg_to_cv2(data, "bgr8")
		prev_image_time = cur_time


def image_analysis(msg):
	if latest_frame is None:
		return
	
	hsv_frame(latest_frame, cv2.COLOR_BGR2HSV)
	# if target_color  == 0:
	# 	hsv_lower_range_1 = np.array([])
	# 	hsv_upper_range_1 = np.array([])
	# 	hsv_lower_range_2 = np.array([])
	# 	hsv_upper_range_2 = np.array([])
	# elif target_color == 1:
	# 	hsv_lower_range_1 = np.array([])
	# 	hsv_upper_range_1 = np.array([])
	# elif target_color == 2:
	# 	hsv_lower_range_1 = np.array([])
	# 	hsv_upper_range_1 = np.array([])

	# mask = cv2.inRange(hsv_frame, hsv_lower_range, hsv_upper_range)

	if target_color == 0:
		hsv_lower_ranges = [np.array([]), np.array([])]
		hsv_upper_ranges = [np.array([]), np.array([])]
	elif target_color == 1:
		hsv_lower_ranges = [np.array([])]
		hsv_upper_ranges = [np.array([])]
	elif target_color == 2:
		hsv_lower_ranges = [np.array([])]
		hsv_upper_ranges = [np.array([])]
		
	frame_width, frame_height, _ = latest_frame.shape
	final_mask = np.zeros((frame_width, frame_height), np.uint8)

	for i in range(len(hsv_lower_ranges)):
		mask = cv2.inRange(hsv_frame, hsv_lower_ranges[i], hsv_upper_ranges[i])
		final_mask = cv2.bitwise_or(final_mask, mask)

	final_mask = cv2.morphologyEx(final_mask, cv2.MORPH_OPEN, kernel)
	_, contours, _ = cv2.findContours(final_mask,  cv2.RETR_EXTRERNAL, cv2.CHAIN_APPROX_NONE)

	if len(contours) > 0:
		largest_contour = max(contours, key=cv2.contourArea)
	
		x,y,w,h = cv2.boundingRect(largest_contour)
		center = (x+(w//2), y+(h//2))

		cv2.rectangle(latest_frame, (x,y), (x+w, y+h), (0,0,255), 2)
		cv2.rectangle(latest_frame, (center[0]-1, center[1]-1), (center[0]+1, center[1]+1), (0.255,0), 2)
		cv2.imshow('latest frame', latest_frame)
		cv2.imshow('mask', mask)
		cv2.waitKey(1)
		return True
	return False

if __name__ == '__main__':
	try:
		rospy.init_node('target_id', anonymous=True)
		rospy.Subscriber('raspicam_node/image', Image, image_cb)
		pub = rospy.Publisher('/target/identified', Bool, queue_size=10)
		rospy.Subscriber('/target/reached', Bool, target_fire_cb)

		rate = rospy.Rate(2)
		while True:
			if image_analysis():
				pub.publish(True)
				# center_msg = UInt16MultiArray(data=[center[0], center[1]])
			rate.sleep()

	except ROSInterruptException:
		cv2.destroyAllWindows()
		exit()
	except KeyboardInterrupt:
		cv2.destroyAllWindows()
		exit()